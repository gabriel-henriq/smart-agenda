// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: aulas.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createAula = `-- name: CreateAula :execresult
INSERT INTO aulas (tablet_id, professor_id, room_id, student_name, meet_start, meet_end, observation)
VALUES ($1, $2, $3, $4, $5, $6, $7)
`

type CreateAulaParams struct {
	TabletID    sql.NullInt32  `json:"tabletID"`
	ProfessorID sql.NullInt32  `json:"professorID"`
	RoomID      sql.NullInt32  `json:"roomID"`
	StudentName sql.NullString `json:"studentName"`
	MeetStart   sql.NullTime   `json:"meetStart"`
	MeetEnd     sql.NullTime   `json:"meetEnd"`
	Observation sql.NullString `json:"observation"`
}

func (q *Queries) CreateAula(ctx context.Context, arg CreateAulaParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createAula,
		arg.TabletID,
		arg.ProfessorID,
		arg.RoomID,
		arg.StudentName,
		arg.MeetStart,
		arg.MeetEnd,
		arg.Observation,
	)
}

const deleteAulaByID = `-- name: DeleteAulaByID :exec
DELETE FROM aulas WHERE id = 1
`

func (q *Queries) DeleteAulaByID(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAulaByID)
	return err
}

const getAulaByID = `-- name: GetAulaByID :one
SELECT id, tablet_id, professor_id, room_id, student_name, meet_start, meet_end, observation, created_at, updated_at FROM aulas WHERE id = $1
`

func (q *Queries) GetAulaByID(ctx context.Context, id int32) (Aula, error) {
	row := q.db.QueryRowContext(ctx, getAulaByID, id)
	var i Aula
	err := row.Scan(
		&i.ID,
		&i.TabletID,
		&i.ProfessorID,
		&i.RoomID,
		&i.StudentName,
		&i.MeetStart,
		&i.MeetEnd,
		&i.Observation,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAulas = `-- name: ListAulas :many
SELECT id, tablet_id, professor_id, room_id, student_name, meet_start, meet_end, observation, created_at, updated_at FROM aulas
`

func (q *Queries) ListAulas(ctx context.Context) ([]Aula, error) {
	rows, err := q.db.QueryContext(ctx, listAulas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Aula{}
	for rows.Next() {
		var i Aula
		if err := rows.Scan(
			&i.ID,
			&i.TabletID,
			&i.ProfessorID,
			&i.RoomID,
			&i.StudentName,
			&i.MeetStart,
			&i.MeetEnd,
			&i.Observation,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAulasByTimeRange = `-- name: ListAulasByTimeRange :many
SELECT id, tablet_id, professor_id, room_id, student_name, meet_start, meet_end, observation, created_at, updated_at FROM aulas WHERE
    meet_start >= $1 AND meet_end   <= $2 OR
    meet_end   >= $1 AND meet_start <= $2
`

type ListAulasByTimeRangeParams struct {
	MeetStart sql.NullTime `json:"meetStart"`
	MeetEnd   sql.NullTime `json:"meetEnd"`
}

func (q *Queries) ListAulasByTimeRange(ctx context.Context, arg ListAulasByTimeRangeParams) ([]Aula, error) {
	rows, err := q.db.QueryContext(ctx, listAulasByTimeRange, arg.MeetStart, arg.MeetEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Aula{}
	for rows.Next() {
		var i Aula
		if err := rows.Scan(
			&i.ID,
			&i.TabletID,
			&i.ProfessorID,
			&i.RoomID,
			&i.StudentName,
			&i.MeetStart,
			&i.MeetEnd,
			&i.Observation,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAulaByID = `-- name: UpdateAulaByID :execresult
UPDATE aulas SET room_id = $2, tablet_id = $3, professor_id = $4, student_name = $5 WHERE id = $1
`

type UpdateAulaByIDParams struct {
	ID          int32          `json:"id"`
	RoomID      sql.NullInt32  `json:"roomID"`
	TabletID    sql.NullInt32  `json:"tabletID"`
	ProfessorID sql.NullInt32  `json:"professorID"`
	StudentName sql.NullString `json:"studentName"`
}

func (q *Queries) UpdateAulaByID(ctx context.Context, arg UpdateAulaByIDParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateAulaByID,
		arg.ID,
		arg.RoomID,
		arg.TabletID,
		arg.ProfessorID,
		arg.StudentName,
	)
}
