// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: aulas.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createAula = `-- name: CreateAula :one
INSERT INTO aulas (tablet_id, professor_id, room_id, student_name, meet_start, meet_end, observation)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, tablet_id, professor_id, room_id, student_name, observation, meet_start, meet_end, created_at, updated_at
`

type CreateAulaParams struct {
	TabletID    int32
	ProfessorID int32
	RoomID      int32
	StudentName string
	MeetStart   time.Time
	MeetEnd     time.Time
	Observation string
}

func (q *Queries) CreateAula(ctx context.Context, arg CreateAulaParams) (Aula, error) {
	row := q.db.QueryRowContext(ctx, createAula,
		arg.TabletID,
		arg.ProfessorID,
		arg.RoomID,
		arg.StudentName,
		arg.MeetStart,
		arg.MeetEnd,
		arg.Observation,
	)
	var i Aula
	err := row.Scan(
		&i.ID,
		&i.TabletID,
		&i.ProfessorID,
		&i.RoomID,
		&i.StudentName,
		&i.Observation,
		&i.MeetStart,
		&i.MeetEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAulaByID = `-- name: DeleteAulaByID :one
DELETE FROM aulas WHERE id = $1 RETURNING id, tablet_id, professor_id, room_id, student_name, observation, meet_start, meet_end, created_at, updated_at
`

func (q *Queries) DeleteAulaByID(ctx context.Context, id int32) (Aula, error) {
	row := q.db.QueryRowContext(ctx, deleteAulaByID, id)
	var i Aula
	err := row.Scan(
		&i.ID,
		&i.TabletID,
		&i.ProfessorID,
		&i.RoomID,
		&i.StudentName,
		&i.Observation,
		&i.MeetStart,
		&i.MeetEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAulaByID = `-- name: GetAulaByID :one
SELECT id, tablet_id, professor_id, room_id, student_name, observation, meet_start, meet_end, created_at, updated_at FROM aulas WHERE id = $1
`

func (q *Queries) GetAulaByID(ctx context.Context, id int32) (Aula, error) {
	row := q.db.QueryRowContext(ctx, getAulaByID, id)
	var i Aula
	err := row.Scan(
		&i.ID,
		&i.TabletID,
		&i.ProfessorID,
		&i.RoomID,
		&i.StudentName,
		&i.Observation,
		&i.MeetStart,
		&i.MeetEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAulas = `-- name: ListAulas :many
SELECT id, tablet_id, professor_id, room_id, student_name, observation, meet_start, meet_end, created_at, updated_at FROM aulas
`

func (q *Queries) ListAulas(ctx context.Context) ([]Aula, error) {
	rows, err := q.db.QueryContext(ctx, listAulas)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Aula{}
	for rows.Next() {
		var i Aula
		if err := rows.Scan(
			&i.ID,
			&i.TabletID,
			&i.ProfessorID,
			&i.RoomID,
			&i.StudentName,
			&i.Observation,
			&i.MeetStart,
			&i.MeetEnd,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAulasByTimeRange = `-- name: ListAulasByTimeRange :many
SELECT a.id,
       a.student_name,
       a.meet_start,
       a.meet_end,
       a.observation,
       p.id AS professor_id,
       t.id AS tablet_id,
       r.id AS room_id,
       a.created_at,
       a.updated_at FROM aulas a
    JOIN professors p on p.id = a.professor_id
    JOIN tablets    t on t.id = a.tablet_id
    JOIN rooms      r on r.id = a.room_id
WHERE
    meet_start >= $1 AND meet_end   <= $2 OR
    meet_end   >= $1 AND meet_start <= $2
`

type ListAulasByTimeRangeParams struct {
	MeetStart time.Time
	MeetEnd   time.Time
}

type ListAulasByTimeRangeRow struct {
	ID          int32
	StudentName string
	MeetStart   time.Time
	MeetEnd     time.Time
	Observation string
	ProfessorID int32
	TabletID    int32
	RoomID      int32
	CreatedAt   time.Time
	UpdatedAt   time.Time
}

func (q *Queries) ListAulasByTimeRange(ctx context.Context, arg ListAulasByTimeRangeParams) ([]ListAulasByTimeRangeRow, error) {
	rows, err := q.db.QueryContext(ctx, listAulasByTimeRange, arg.MeetStart, arg.MeetEnd)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAulasByTimeRangeRow{}
	for rows.Next() {
		var i ListAulasByTimeRangeRow
		if err := rows.Scan(
			&i.ID,
			&i.StudentName,
			&i.MeetStart,
			&i.MeetEnd,
			&i.Observation,
			&i.ProfessorID,
			&i.TabletID,
			&i.RoomID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAulaByID = `-- name: UpdateAulaByID :one
UPDATE aulas
SET room_id = COALESCE($1, room_id),
    tablet_id = COALESCE($2, tablet_id),
    professor_id = COALESCE($3, professor_id),
    student_name = COALESCE($4, student_name),
    meet_start = COALESCE($5, meet_start),
    meet_end = COALESCE($6, meet_end),
    observation = COALESCE($7, observation)
WHERE id = $8 RETURNING id, tablet_id, professor_id, room_id, student_name, observation, meet_start, meet_end, created_at, updated_at
`

type UpdateAulaByIDParams struct {
	RoomID      sql.NullInt32
	TabletID    sql.NullInt32
	ProfessorID sql.NullInt32
	StudentName sql.NullString
	MeetStart   sql.NullTime
	MeetEnd     sql.NullTime
	Observation sql.NullString
	ID          int32
}

func (q *Queries) UpdateAulaByID(ctx context.Context, arg UpdateAulaByIDParams) (Aula, error) {
	row := q.db.QueryRowContext(ctx, updateAulaByID,
		arg.RoomID,
		arg.TabletID,
		arg.ProfessorID,
		arg.StudentName,
		arg.MeetStart,
		arg.MeetEnd,
		arg.Observation,
		arg.ID,
	)
	var i Aula
	err := row.Scan(
		&i.ID,
		&i.TabletID,
		&i.ProfessorID,
		&i.RoomID,
		&i.StudentName,
		&i.Observation,
		&i.MeetStart,
		&i.MeetEnd,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
