// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: users.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, email, password) VALUES ($1, $2, $3) RETURNING id, name, email, password, created_at, updated_at
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE FROM users WHERE id = $1 RETURNING id, name, email, password, created_at, updated_at
`

func (q *Queries) DeleteUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT count(*) OVER () AS total_items, sub_query.id, sub_query.name, sub_query.email, sub_query.password, sub_query.created_at, sub_query.updated_at FROM
    (SELECT id, name, email, password, created_at, updated_at FROM users ORDER BY CASE
        WHEN NOT $3::bool AND $4::text = 'name' THEN name END ASC, CASE
        WHEN $3::bool     AND $4::text = 'name' THEN name END DESC, CASE
        WHEN NOT $3::bool AND $4::text = 'id'   THEN id   END ASC, CASE
        WHEN $3::bool     AND $4::text = 'id'   THEN id   END DESC)
        sub_query LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit   int32
	Offset  int32
	Reverse bool
	OrderBy string
}

type ListUsersRow struct {
	TotalItems int64
	ID         int32
	Name       string
	Email      string
	Password   string
	CreatedAt  time.Time
	UpdatedAt  time.Time
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]ListUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsers,
		arg.Limit,
		arg.Offset,
		arg.Reverse,
		arg.OrderBy,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUsersRow{}
	for rows.Next() {
		var i ListUsersRow
		if err := rows.Scan(
			&i.TotalItems,
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserByID = `-- name: UpdateUserByID :one
UPDATE users
SET
    name = COALESCE($1, name),
    email = COALESCE($2, email),
    password = COALESCE($3, password)
WHERE id = $4 RETURNING id, name, email, password, created_at, updated_at
`

type UpdateUserByIDParams struct {
	Name     sql.NullString
	Email    sql.NullString
	Password sql.NullString
	ID       int32
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserByID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
